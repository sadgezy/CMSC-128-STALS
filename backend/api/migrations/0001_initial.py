# Generated by Django 4.1.8 on 2023-05-31 16:56

from django.db import migrations, models
import django.utils.timezone
import djongo.models.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=255)),
                ('password', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Establishment',
            fields=[
                ('_id', djongo.models.fields.ObjectIdField(auto_created=True, primary_key=True, serialize=False)),
                ('owner', models.CharField(max_length=25)),
                ('name', models.CharField(max_length=255)),
                ('location_exact', models.CharField(max_length=255)),
                ('location_approx', models.CharField(max_length=255)),
                ('establishment_type', models.CharField(max_length=255)),
                ('tenant_type', models.CharField(max_length=255)),
                ('utilities', djongo.models.fields.JSONField(default=list)),
                ('description', models.TextField()),
                ('loc_picture', models.CharField(max_length=9999999)),
                ('proof_type', models.CharField(max_length=255)),
                ('proof_number', models.CharField(max_length=255)),
                ('proof_picture', models.CharField(max_length=9999999)),
                ('reviews', djongo.models.fields.JSONField(default=list)),
                ('verified', models.BooleanField(default=False)),
                ('archived', models.BooleanField(default=False)),
                ('accommodations', djongo.models.fields.JSONField(default=list)),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('_id', djongo.models.fields.ObjectIdField(auto_created=True, primary_key=True, serialize=False)),
                ('user_id', models.CharField(max_length=25)),
                ('establishment_id', models.CharField(max_length=25)),
                ('username', models.CharField(max_length=45)),
                ('date_submitted', models.DateTimeField(auto_now_add=True)),
                ('body', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('_id', djongo.models.fields.ObjectIdField(auto_created=True, primary_key=True, serialize=False)),
                ('availability', models.BooleanField()),
                ('price_lower', models.IntegerField()),
                ('price_upper', models.IntegerField()),
                ('capacity', models.PositiveIntegerField()),
                ('establishment_id', models.CharField(max_length=25)),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('_id', djongo.models.fields.ObjectIdField(auto_created=True, primary_key=True, serialize=False)),
                ('user_id', models.CharField(max_length=25)),
                ('establishment_id', models.CharField(max_length=25)),
                ('date_submitted', models.DateTimeField(auto_now_add=True)),
                ('tags', djongo.models.fields.JSONField(default=list)),
                ('description', models.TextField()),
                ('resolved', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('_id', djongo.models.fields.ObjectIdField(auto_created=True, primary_key=True, serialize=False)),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.CharField(max_length=80, unique=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('middle_initial', models.CharField(max_length=100)),
                ('suffix', models.CharField(max_length=10)),
                ('phone_no', models.CharField(max_length=15)),
                ('username', models.CharField(max_length=45)),
                ('verified', models.BooleanField(default=False)),
                ('id_type', models.CharField(max_length=50)),
                ('id_picture', models.CharField(max_length=9999999)),
                ('id_number', models.CharField(max_length=50)),
                ('archived', models.BooleanField(default=False)),
                ('tickets', djongo.models.fields.JSONField(default=list)),
                ('user_type', models.CharField(max_length=50)),
                ('establishments', djongo.models.fields.JSONField(default=list)),
                ('reviews', djongo.models.fields.JSONField(default=list)),
                ('favorites', djongo.models.fields.JSONField(default=list)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
